sinFunc :: Double -> Double
sinFunc x = sin x

cosFunc :: Double -> Double
cosFunc x = cos x

tanFunc :: Double -> Double
tanFunc x = tan x

expFunc :: Double -> Double
expFunc x = exp x

logFunc :: Double -> Double
logFunc x = log x

calculadoraCientifica :: IO ()
calculadoraCientifica = do
    putStrLn "Calculadora Científica"
    putStrLn "----------------------"
    
    putStr "Ingrese el valor: "
    input <- getLine
    let valor = read input :: Double
    
    putStrLn "Seleccione la función a aplicar:"
    putStrLn "1. Seno"
    putStrLn "2. Coseno"
    putStrLn "3. Tangente"
    putStrLn "4. Exponencial"
    putStrLn "5. Logaritmo Neperiano"
    
    putStr "Opción: "
    opcionInput <- getLine
    let opcion = read opcionInput :: Int
    
    putStrLn "----------------------"
    putStrLn "Resultados:"
    putStrLn "----------------------"
    putStrLn "  Entero   |   Resultado"
    
    mapM_ (\n -> putStrLn $ "    " ++ show n ++ "      |      " ++ show (aplicarFuncion opcion (fromIntegral n))) [1..round valor]

aplicarFuncion :: Int -> Double -> Double
aplicarFuncion 1 = sinFunc
aplicarFuncion 2 = cosFunc
aplicarFuncion 3 = tanFunc
aplicarFuncion 4 = expFunc
aplicarFuncion 5 = logFunc
aplicarFuncion _ = error "Opción de función no válida"

main :: IO ()
main = calculadoraCientifica
